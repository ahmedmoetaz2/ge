package Controller;

import entities.Evenement;
import Services.EvenementService;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.sql.SQLException;
import java.time.LocalDate;

public class EventFormController {
    @FXML private TextField nameField;
    @FXML private TextField categoryField;
    @FXML private TextArea descriptionField;
    @FXML private TextField priceField;
    @FXML private DatePicker startDatePicker;
    @FXML private DatePicker endDatePicker;
    @FXML private TextField locationField;
    @FXML private TextField workshopsAvailableField;
    @FXML private TextField numberOfWorkshopsField;
    @FXML private Button uploadButton;
    @FXML private ImageView previewImageView;

    private String mode = "add"; // "add" or "edit"
    private Evenement event;
    private String imagePath = "file:///path/to/default/image.jpg"; // Default image path
    private final EvenementService evenementService = new EvenementService();

    @FXML
    public void initialize() {
        // Initialize form with default values if needed
        startDatePicker.setValue(LocalDate.now());
        endDatePicker.setValue(LocalDate.now().plusDays(1));
    }

    public void setMode(String mode) {
        this.mode = mode;
    }

    public void setEvent(Evenement event) {
        this.event = event;
        this.mode = "edit";
        populateFields();
    }

    private void populateFields() {
        if (event != null) {
            nameField.setText(event.getNameEvent());
            categoryField.setText(event.getCategorieEvent());
            descriptionField.setText(event.getDescription());
            priceField.setText(String.valueOf(event.getPrice()));
            startDatePicker.setValue(event.getDateD());
            endDatePicker.setValue(event.getDateF());
            locationField.setText(event.getLieuName());
            workshopsAvailableField.setText(event.getWorkshopsAvailable());
            numberOfWorkshopsField.setText(String.valueOf(event.getNumberOfWorkshop()));

            // Load image if available
            if (event.getImagePath() != null && !event.getImagePath().isEmpty()) {
                imagePath = event.getImagePath();
                try {
                    previewImageView.setImage(new Image(imagePath));
                } catch (Exception e) {
                    System.err.println("Failed to load image: " + e.getMessage());
                }
            }
        }
    }

    @FXML
    public void saveEvent() {
        if (!validateForm()) {
            return;
        }

        try {
            String name = nameField.getText();
            String category = categoryField.getText();
            String description = descriptionField.getText();
            float price = Float.parseFloat(priceField.getText());
            LocalDate dateD = startDatePicker.getValue();
            LocalDate dateF = endDatePicker.getValue();
            String lieuName = locationField.getText();
            String workshopsAvailable = workshopsAvailableField.getText();
            int numberOfWorkshops = Integer.parseInt(numberOfWorkshopsField.getText());

            // For simplicity, we'll use default values for fields that might not be in the form
            int lieuId = event != null ? event.getLieuld() : 1;
            int userId = event != null ? event.getUserid() : 1;
            int atelierId = event != null ? event.getAtelierId() : 1;

            if ("add".equals(mode)) {
                Evenement newEvent = new Evenement(
                        null, // ID will be generated by the database
                        name,
                        category,
                        workshopsAvailable,
                        numberOfWorkshops,
                        description,
                        price,
                        lieuName,
                        dateD,
                        dateF,
                        lieuId,
                        userId,
                        atelierId,
                        imagePath
                );
                evenementService.add(newEvent);
                showInfo("Success", "Event added successfully!");
            } else { // edit mode
                event.setNameEvent(name);
                event.setCategorieEvent(category);
                event.setWorkshopsAvailable(workshopsAvailable);
                event.setNumberOfWorkshop(numberOfWorkshops);
                event.setDescription(description);
                event.setPrice(price);
                event.setLieuName(lieuName);
                event.setDateD(dateD);
                event.setDateF(dateF);
                event.setImagePath(imagePath);

                evenementService.update(event);
                showInfo("Success", "Event updated successfully!");
            }

            closeWindow();
        } catch (NumberFormatException e) {
            showError("Invalid number format: " + e.getMessage());
        } catch (SQLException e) {
            showError("Database error: " + e.getMessage());
        } catch (Exception e) {
            showError("Error: " + e.getMessage());
        }
    }

    private boolean validateForm() {
        StringBuilder errors = new StringBuilder();

        if (nameField.getText().isEmpty()) {
            errors.append("- Event name is required\n");
        }

        if (categoryField.getText().isEmpty()) {
            errors.append("- Category is required\n");
        }

        if (priceField.getText().isEmpty()) {
            errors.append("- Price is required\n");
        } else {
            try {
                float price = Float.parseFloat(priceField.getText());
                if (price < 0) {
                    errors.append("- Price cannot be negative\n");
                }
            } catch (NumberFormatException e) {
                errors.append("- Price must be a valid number\n");
            }
        }

        if (startDatePicker.getValue() == null) {
            errors.append("- Start date is required\n");
        }

        if (endDatePicker.getValue() == null) {
            errors.append("- End date is required\n");
        } else if (startDatePicker.getValue() != null &&
                endDatePicker.getValue().isBefore(startDatePicker.getValue())) {
            errors.append("- End date cannot be before start date\n");
        }

        if (locationField.getText().isEmpty()) {
            errors.append("- Location is required\n");
        }

        if (workshopsAvailableField.getText().isEmpty()) {
            errors.append("- Workshops available is required\n");
        }

        if (numberOfWorkshopsField.getText().isEmpty()) {
            errors.append("- Number of workshops is required\n");
        } else {
            try {
                int numberOfWorkshops = Integer.parseInt(numberOfWorkshopsField.getText());
                if (numberOfWorkshops < 0) {
                    errors.append("- Number of workshops cannot be negative\n");
                }
            } catch (NumberFormatException e) {
                errors.append("- Number of workshops must be a valid integer\n");
            }
        }

        if (errors.length() > 0) {
            showError("Please fix the following errors:\n" + errors.toString());
            return false;
        }

        return true;
    }

    @FXML
    public void handleFileUpload() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select Event Image");
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg", "*.gif")
        );

        File selectedFile = fileChooser.showOpenDialog(nameField.getScene().getWindow());
        if (selectedFile != null) {
            try {
                // Convert to file URI format
                imagePath = selectedFile.toURI().toString();
                // Update preview image
                previewImageView.setImage(new Image(imagePath));
            } catch (Exception e) {
                showError("Error loading image: " + e.getMessage());
            }
        }
    }

    @FXML
    public void cancel() {
        closeWindow();
    }

    private void closeWindow() {
        Stage stage = (Stage) nameField.getScene().getWindow();
        stage.close();
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Error");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showInfo(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}